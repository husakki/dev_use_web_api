{
	"info": {
		"_postman_id": "10464710-2286-4379-89c4-f0c29739d9fb",
		"name": "use-webapi",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "38619616"
	},
	"item": [
		{
			"name": "empty class",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name_mclass\": \"MyClass\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/class"
			},
			"response": []
		},
		{
			"name": "normal class",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name_mclass\": \"MyClass3443\",\r\n        \"attributes\": [\r\n            {\r\n                \"name_attr\": \"MyAttr232\",\r\n                \"type\": \"String\"\r\n            },\r\n             {\r\n                \"name_attr\": \"MyAttr44242\",\r\n                \"type\": \"String\"\r\n            }\r\n        ],\r\n        \"operations\": [\r\n            {\r\n                \"head\": \"operation()1223\",\r\n                \"body\": null\r\n            }\r\n        ]\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/class"
			},
			"response": []
		},
		{
			"name": "no class name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"A class must be named\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name_mclass\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/class"
			},
			"response": []
		},
		{
			"name": "basic GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains valid UseClass objects\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('array');\r",
							"    \r",
							"    if (responseJson.length > 0) {\r",
							"        responseJson.forEach((useClass) => {\r",
							"            pm.expect(useClass).to.have.property('name_mclass');\r",
							"            pm.expect(useClass.attributes).to.be.an('array');\r",
							"            pm.expect(useClass.operations).to.be.an('array');\r",
							"        });\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "localhost:8080/classes"
			},
			"response": []
		},
		{
			"name": "basic POST success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the created UseClass object\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"    pm.expect(responseJson).to.have.property('name_mclass');\r",
							"    pm.expect(responseJson).to.have.property('attributes').that.is.an('array');\r",
							"    pm.expect(responseJson).to.have.property('operations').that.is.an('array');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name_mclass\": \"ExampleClass\",\r\n    \"attributes\": [\r\n        {\r\n            \"name_attr\": \"Attribute1\",\r\n            \"type\": \"String\"\r\n        }\r\n    ],\r\n    \"operations\": [\r\n        {\r\n            \"head\": \"Operation1\",\r\n            \"body\": null\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/class"
			},
			"response": []
		},
		{
			"name": "basic POST fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is returned for invalid model\", function () {\r",
							"    const responseText = pm.response.text();  // Fixed variable name\r",
							"    pm.expect(responseText).to.be.a('string');\r",
							"    pm.expect(responseText).to.include(\"A class must be named\"); // Updated error message\r",
							"});\r",
							"// Add a test to check the length of the response data\r",
							"pm.test(\"Response data length is greater than 0\", function () {\r",
							"    const responseData = pm.response.text();  \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"attributes\": [\r\n        {\r\n            \"name_attr\": \"Attribute1\",\r\n            \"type\": \"String\"\r\n        }\r\n    ],\r\n    \"operations\": [\r\n        {\r\n            \"head\": \"Operation1\",\r\n            \"body\": null\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/class"
			},
			"response": []
		},
		{
			"name": "duplicate class",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"Class name already exists\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n  {\r\n    \"name_mclass\": \"TestClass2\",\r\n    \"attributes\": [\r\n      {\r\n        \"name_attr\": \"name224\",\r\n        \"type\": \"String\"\r\n      },\r\n      {\r\n        \"name_attr\": \"name23\",\r\n        \"type\": \"String\"\r\n      }\r\n    ],\r\n    \"operations\": [\r\n      {\r\n        \"head\": \"123\",\r\n        \"body\": null\r\n      }\r\n    ]\r\n  }\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/class"
			},
			"response": []
		},
		{
			"name": "duplicate attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"Attribute creation failed!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n  {\r\n    \"name_mclass\": \"TestClassDoubleAttr\",\r\n    \"attributes\": [\r\n      {\r\n        \"name_attr\": \"name23\",\r\n        \"type\": \"String\"\r\n      },\r\n      {\r\n        \"name_attr\": \"name23\",\r\n        \"type\": \"String\"\r\n      }\r\n    ],\r\n    \"operations\": [\r\n      {\r\n        \"head\": \"123\",\r\n        \"body\": null\r\n      }\r\n    ]\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/class"
			},
			"response": []
		},
		{
			"name": "duplicate operation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"Operation creation failed!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n  {\r\n    \"name_mclass\": \"TestClassDupOperation\",\r\n    \"attributes\": [\r\n      {\r\n        \"name_attr\": \"name224\",\r\n        \"type\": \"String\"\r\n      },\r\n      {\r\n        \"name_attr\": \"name23\",\r\n        \"type\": \"String\"\r\n      }\r\n    ],\r\n    \"operations\": [\r\n      {\r\n        \"head\": \"123\",\r\n        \"body\": null\r\n      },\r\n      {\r\n        \"head\": \"123\",\r\n        \"body\": null\r\n      }\r\n    ]\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/class"
			},
			"response": []
		},
		{
			"name": "no attribute name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"Modelelement without name\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n  {\r\n    \"name_mclass\": \"TestClassNoAttrName\",\r\n    \"attributes\": [\r\n      {\r\n        \"name_attr\": \"\",\r\n        \"type\": \"String\"\r\n      }\r\n    ],\r\n    \"operations\": [\r\n      {\r\n        \"head\": \"123\",\r\n        \"body\": null\r\n      }\r\n    ]\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/class"
			},
			"response": []
		},
		{
			"name": "no operation name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"Operation name is required!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n  {\r\n    \"name_mclass\": \"TestClassNoOperationName\",\r\n    \"attributes\": [\r\n      {\r\n        \"name_attr\": \"name224\",\r\n        \"type\": \"String\"\r\n      },\r\n      {\r\n        \"name_attr\": \"name23\",\r\n        \"type\": \"String\"\r\n      }\r\n    ],\r\n    \"operations\": [\r\n      {\r\n        \"head\": \"\",\r\n        \"body\": null\r\n      }\r\n    ]\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/class"
			},
			"response": []
		},
		{
			"name": "POST performance",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a unique name using an iteration counter and timestamp\r",
							"let iter = pm.info.iteration || 0;\r",
							"let uniqueName = `Class-${iter}-${Date.now()}`;\r",
							"\r",
							"pm.environment.set(\"uniqueName\", uniqueName);\r",
							"\r",
							"console.log(\"Generated unique name: \" + uniqueName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is below 20ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is below 100ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n  {\r\n    \"name_mclass\": \"{{uniqueName}}\",\r\n    \"attributes\": [\r\n      {\r\n        \"name_attr\": \"name224\",\r\n        \"type\": \"String\"\r\n      },\r\n      {\r\n        \"name_attr\": \"name23\",\r\n        \"type\": \"String\"\r\n      }\r\n    ],\r\n    \"operations\": [\r\n      {\r\n        \"head\": \"123\",\r\n        \"body\": null\r\n      }\r\n    ]\r\n  }\r\n  {\r\n    \"name_mclass\": \"TestClass2\",\r\n    \"attributes\": [\r\n      {\r\n        \"name_attr\": \"name224\",\r\n        \"type\": \"String\"\r\n      },\r\n      {\r\n        \"name_attr\": \"name23\",\r\n        \"type\": \"String\"\r\n      }\r\n    ],\r\n    \"operations\": [\r\n      {\r\n        \"head\": \"123\",\r\n        \"body\": null\r\n      }\r\n    ]\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/class"
			},
			"response": []
		}
	]
}