model Currency

enum InvoiceState {
  OPEN,
  PAYED
}

class Invoice
  attributes
    nr:Integer
    date:Date
  operations
    addLineItem(i:LineItem)
  constraints
    inv sameCurrency:
      self.lineItem->forAll(i1, i2 | i1.amount.currency = i2.amount.currency)
end

class LineItem
  attributes
    nr:Integer
    amount:Amount
    quantity:Integer
    completeAmount:Amount derive = self.amount.multiply(self.quantity)
    item:String
end

composition Invoice_LineItem between
  Invoice[1]
  LineItem[0..*]
end

class Currency
  attributes
    name:String
    symbol:String
    exchangeRateUSD:Real
end

dataType Amount
   operations
     Amount(amount:Real, currency:Currency)

     getValueInUSD():Real =
       self.amount * self.currency.exchangeRateUSD

     add(a:Amount): Amount =
       Amount(self.amount + (a.getValueInUSD() / self.currency.exchangeRateUSD), self.currency)

     multiply(r:Real) : Amount =
       Amount(self.amount * r, self.currency)

     getText(): String =
       let roundedAmount:Real = (self.amount * 100).round() / 100 in
         roundedAmount.toString() + ' ' + self.currency.symbol
end

dataType Date
  operations
    Date(day: Integer, month : Integer, year : Integer)
    pre: day >= 1 and day <= 31
    pre: month >= 1 and month <= 12

    getMonths() : Sequence(Tuple(days : Integer, name : String)) = Sequence{
        Tuple{name='January', days=31},
        Tuple{name='February', days=if self.isLeapYear() then 29 else 28 endif},
        Tuple{name='March', days=31},
        Tuple{name='April', days=30},
        Tuple{name='May', days=31},
        Tuple{name='June', days=30},
        Tuple{name='July', days=31},
        Tuple{name='August', days=31},
        Tuple{name='September', days=30},
        Tuple{name='October', days=31},
        Tuple{name='November', days=30},
        Tuple{name='December', days=31}
    }

    // isWorkday():Boolean =

    isLeapYear() : Boolean =
        self.year.mod(400) = 0 or (self.year.mod(4) = 0 and self.year.mod(100) <> 0)

    add(days : Integer) : Date =
        Sequence{1..days}->iterate(d; result : Date =
        Date(self.day, self.month, self.year) |
            if result.day + 1 > self.getMonths()->at(result.month).days then
              if (result.month = 12) then
                Date(1, 1, result.year + 1)
              else
                Date(1, result.month + 1, result.year)
              endif
            else
              Date(result.day + 1, result.month, result.year)
            endif
        )

    getEasterSunday() : Date =
       // Following Gauss algorithm to calculate eastern
       // See: https://de.wikipedia.org/wiki/Gau%C3%9Fsche_Osterformel

       let k:Integer = (self.year / 100).floor() in
       let m:Integer = 15 + ((3 * k) / 4).floor() - ((8 * k + 13) / 25).floor() in
       let s:Integer = 2 - ((3 * k + 3) / 4).floor() in
       let a:Integer = self.year.mod(19) in
       let d:Integer = (19 * a + m).mod(30) in
       let r:Integer = ((d + (a / 11).floor()) / 29).floor() in
       let og:Integer = 21 + d - r in
       let sz:Integer = 7 - (self.year + (self.year / 4).floor() + s).mod(7) in
       let oe:Integer = 7 - (og - sz).mod(7) in
       let os:Integer = og + oe in
         Date(1, 3, self.year).add(os - 1)
end
